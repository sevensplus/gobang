{"version":3,"sources":["index.js"],"names":["Grid","clicker","a","props","click","row","col","next","judge","toString","this","whiteList","blackList","rowS","colS","digit","tag","includes","className","onClick","Component","Row","judgedeliver","b","rowNum","black","white","rowList","Array","from","keys","map","item","key","Winner","winner","classes","Board","position","state","push","setState","site","split","parseInt","distribution","judgelist","analysis","k","c","d","line","i","neighbor","judgement","boardEmpty","total","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.e7cd38c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Grid extends Component {\n  clicker = (a) => {\n    const {click, row, col, next, judge} = this.props\n    click(row, col)\n    const position = `${row.toString()},${col.toString()}`\n    judge(position, next)\n  }\n  render() {\n    const {row, col, whiteList, blackList} = this.props\n    let rowS = row.toString()\n    let colS = col.toString()\n    let digit = `${rowS},${colS}`\n    let tag = ''\n    if (whiteList.includes(digit)){\n      tag = `${rowS},${colS} row_${rowS} col_${colS} grid white`\n    } else if (blackList.includes(digit)){\n      tag = `${rowS},${colS} row_${rowS} col_${colS} grid black`\n    } else {\n      tag = `${rowS},${colS} row_${rowS} col_${colS} grid`\n    }\n    return(\n    <div className={tag} onClick={this.clicker}></div>\n    )\n  }\n}\nclass Row extends Component {\n  judgedeliver = (a,b) => {\n    const {judge} = this.props\n    judge(a, b)\n  }\n  render() {\n    const {rowNum, click, black, white} = this.props\n    const rowEmpty = Array.from(Array(19).keys())\n    const rowList = rowEmpty.map(item => {\n      return(<Grid col={item} row={rowNum} key={rowNum*19+item} click={click}\n                    blackList={black} whiteList={white} judge={this.judgedeliver} next={this.props.next}/>)\n    })\n    return(\n    <div className='row'>{rowList}</div>\n    )\n  }\n}\nclass Winner extends Component {\n  render(){\n    const {winner,next} = this.props;\n    if (winner !== 'none'){\n      return(\n      <div className='result state'>Winnerï¼š{winner}</div>\n      )\n    } else {\n      let classes = `stage state ${next ? 'black' : 'white'}`;\n      return(<div className={classes}>Stage : {next ? 'Black' : 'White'}</div>);\n    }\n  }\n}\nclass Board extends Component {\n  constructor(){\n    super()\n    this.state = {\n      white:[],\n      black:[],\n      winner:'none',\n      next:true\n    }\n  }\n  click = (a,b) => {\n    const position = a.toString() + ',' + b.toString()\n    let {white, black, next} = this.state\n    if (this.state.next) {\n      black.push(position)\n    } else {\n      white.push(position)\n    }\n    this.setState ({\n      black:black,\n      white:white,\n      winner:'none',\n      next:!next\n    })\n  }\n\n  judge = (a,b) => {\n    const site = a.split(',')\n    let row = parseInt(site[0])\n    let col = parseInt(site[1])\n    let distribution = []\n    if (b) {\n      distribution = this.state.black\n    } else {\n      distribution = this.state.white\n    }\n    function judgement (c, d) {\n      let line = 1\n      for (let i = 1; i < 6; i += 1) {        \n        let neighbor = `${row + i * c},${col + i * d}`\n        if (!distribution.includes(neighbor)) break;\n        line += 1\n      }\n      for (let i = 1; i < 6; i += 1) {\n        let neighbor = `${row - i * c},${col - i * d}`\n        if (!distribution.includes(neighbor)) break;\n        line += 1\n      }\n      if (line >= 5){\n        let win = b ? 'Black' : 'White'\n        return win;\n      }\n    }\n    let judgelist = []\n    let analysis = [[0,1], [1,0], [1,1], [1,-1]]\n    for (let k = 0; k < 4; k += 1) {\n      judgelist[k] = judgement(analysis[k][0],analysis[k][1])\n      if (judgelist[k]) {\n        this.setState(state => ({\n          white:state.white,\n          black:state.black,\n          next:state.next,\n          winner:judgelist[k]\n        }))\n      }\n    }\n  }\n  render() {\n    const boardEmpty=Array.from(Array(19).keys())\n    const {black, white} = this.state\n    const total = boardEmpty.map(item => {\n      return(<Row rowNum={item} click={this.click} key={'row'+item.toString()} \n                  black={black} white={white} judge={this.judge} next={this.state.next}/>)\n    })\n    return(\n    <div className='container'>\n      <div>{total}</div>\n      <Winner winner={this.state.winner} next={this.state.next}/>\n    </div>\n    )\n  }\n}\nReactDOM.render(<Board/>,document.querySelector('main'))"],"sourceRoot":""}