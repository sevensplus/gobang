{"version":3,"sources":["index.js"],"names":["Grid","clicker","a","props","click","row","col","next","judge","win","toString","this","whiteList","blackList","rowS","colS","digit","tag","includes","className","onClick","Component","Row","judgedeliver","b","rowNum","black","white","rowList","Array","from","keys","map","item","key","Winner","winner","reback","step","back","isShow","classes","style","display","Board","position","state","push","setState","site","split","parseInt","distribution","judgelist","analysis","k","c","d","line","i","neighbor","judgement","slice","boardEmpty","length","total","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.33a8d762.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Grid extends Component {\r\n  clicker = (a) => {\r\n    const {click,row,col,next,judge,win} = this.props\r\n    if (win) return;\r\n    click(row,col)\r\n    const position = `${row.toString()},${col.toString()}`\r\n    judge(position,next)\r\n  }\r\n  render() {\r\n    const {row,col,whiteList,blackList} = this.props\r\n    let rowS = row.toString()\r\n    let colS = col.toString()\r\n    let digit = `${rowS},${colS}`\r\n    let tag = ''\r\n    if (whiteList.includes(digit)){\r\n      tag = `${rowS},${colS} row_${rowS} col_${colS} grid white`\r\n    } else if (blackList.includes(digit)){\r\n      tag = `${rowS},${colS} row_${rowS} col_${colS} grid black`\r\n    } else {\r\n      tag = `${rowS},${colS} row_${rowS} col_${colS} grid`\r\n    }\r\n    return(\r\n    <div className={tag} onClick={this.clicker}></div>\r\n    )\r\n  }\r\n}\r\nclass Row extends Component {\r\n  judgedeliver = (a,b) => {\r\n    const {judge} = this.props\r\n    judge(a,b)\r\n  }\r\n  render() {\r\n    const {rowNum,click,black,white} = this.props\r\n    const rowEmpty = Array.from(Array(19).keys())\r\n    const rowList = rowEmpty.map(item => {\r\n      return(<Grid col={item} row={rowNum} key={rowNum*19+item} click={click} win={this.props.win}\r\n                    blackList={black} whiteList={white} judge={this.judgedeliver} next={this.props.next}/>)\r\n    })\r\n    return(\r\n    <div className='row'>{rowList}</div>\r\n    )\r\n  }\r\n}\r\nclass Winner extends Component {\r\n  render(){\r\n    const {winner,next,reback,step,back} = this.props;\r\n    let isShow = step == 0\r\n    if (winner !== 'none'){\r\n      return(\r\n        <div>\r\n          <div className='result state'>Winnerï¼š{winner}</div>\r\n          <div className='again' onClick={reback}>Play Again</div>\r\n        </div>\r\n      )\r\n    } else {\r\n      let classes = `stage state ${next ? 'black' : 'white'}`;\r\n      return(\r\n        <div>\r\n          <div className={classes}>Stage : {next ? 'Black' : 'White'}</div>\r\n          <div onClick={back} className='back' style={{display: isShow ? 'none' : 'block'}}>Back</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nclass Board extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      white:[],\r\n      black:[],\r\n      winner:'none',\r\n      next:true\r\n    }\r\n  }\r\n  click = (a,b) => {\r\n    const position = a.toString() + ',' + b.toString()\r\n    let {white,black,next} = this.state\r\n    if (black.includes(position) || white.includes(position)) return;\r\n    if (this.state.next) {\r\n      black.push(position)\r\n    } else {\r\n      white.push(position)\r\n    }\r\n    this.setState ({\r\n      black:black,\r\n      white:white,\r\n      winner:'none',\r\n      next:!next\r\n    })\r\n  }\r\n\r\n  judge = (a,b) => {\r\n    const site = a.split(',')\r\n    let row = parseInt(site[0])\r\n    let col = parseInt(site[1])\r\n    let distribution = []\r\n    if (b) {\r\n      distribution = this.state.black\r\n    } else {\r\n      distribution = this.state.white\r\n    }\r\n    function judgement (c,d) {\r\n      let line = 1\r\n      for (let i = 1; i < 6; i += 1) {        \r\n        let neighbor = `${row + i * c},${col + i * d}`\r\n        if (!distribution.includes(neighbor)) break;\r\n        line += 1\r\n      }\r\n      for (let i = 1; i < 6; i += 1) {\r\n        let neighbor = `${row - i * c},${col - i * d}`\r\n        if (!distribution.includes(neighbor)) break;\r\n        line += 1\r\n      }\r\n      if (line >= 5){\r\n        let win = b ? 'Black' : 'White'\r\n        return win;\r\n      }\r\n    }\r\n    let judgelist = []\r\n    let analysis = [[0,1],[1,0],[1,1],[1,-1]]\r\n    for (let k = 0; k < 4; k += 1) {\r\n      judgelist[k] = judgement(analysis[k][0],analysis[k][1])\r\n      if (judgelist[k]) {\r\n        this.setState(state => ({\r\n          winner:judgelist[k]\r\n        }))\r\n      }\r\n    }\r\n  }\r\n  reback = () => {\r\n    this.setState(state => ({\r\n      white:[],\r\n      black:[],\r\n      winner:'none',\r\n      next:true\r\n    }))\r\n  }\r\n  back = () => {\r\n    let {black,white,next} = this.state\r\n    if (this.state.next == true){\r\n      this.setState({\r\n        white:white.slice(0,-1),\r\n        next:!next,\r\n      })\r\n    } else {\r\n      this.setState({\r\n        black:black.slice(0,-1),\r\n        next:!next,\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const boardEmpty=Array.from(Array(19).keys())\r\n    const {black, white} = this.state\r\n    let step = black.length + white.length\r\n    const total = boardEmpty.map(item => {\r\n      return(<Row rowNum={item} click={this.click} key={'row'+item.toString()} win={this.state.winner !== 'none'}\r\n                  black={black} white={white} judge={this.judge} next={this.state.next}/>)\r\n    })\r\n    return(\r\n    <div className='container'>\r\n      <div>{total}</div>\r\n      <Winner winner={this.state.winner} next={this.state.next} reback={this.reback} back={this.back} step={step}/>\r\n    </div>\r\n    )\r\n  }\r\n}\r\nReactDOM.render(<Board/>,document.querySelector('main'))"],"sourceRoot":""}